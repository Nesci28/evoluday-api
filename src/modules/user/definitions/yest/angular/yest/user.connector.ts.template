import { Injectable } from "@angular/core";
    import {
      User,
      UserApi as UserConnector,
      UserCreateRequestBody,
      UserPatchRequestBody,
      UserSearch,
      UserUpdateRequestBody,
    } from "@evoluday/api-typescript-fetch";
    import { ResultHandler } from "@yest/result-handler";
    import { from, Observable } from "rxjs";

    import { BaseService } from "../../interfaces/base-service.interface";

    @Injectable()
    export class UserService implements BaseService<User> {
      constructor(
        private userConnector: UserConnector,
      ) {}

      public getAll(): Observable<ResultHandler<User[]>> {
        return from(this.userConnector.userGetAll({ isArchived: false }));
      }

      public getById(id: string): Observable<ResultHandler<User>> {
        return from(this.userConnector.userGetById({ id }));
      }

      public create(
        userCreateRequestBody: UserCreateRequestBody,
      ): Observable<ResultHandler<User>> {
        return from(this.userConnector.userCreate({ userCreateRequestBody }));
      }

      public update(
        id: string,
        userUpdateRequestBody: UserUpdateRequestBody,
      ): Observable<ResultHandler<User>> {
        return from(
          this.userConnector.userUpdate({ id, userUpdateRequestBody }),
        );
      }

      public patch(
        id: string,
        userPatchRequestBody: UserPatchRequestBody,
      ): Observable<ResultHandler<User>> {
        return from(this.userConnector.userPatch({ id, userPatchRequestBody }));
      }

      public archive(id: string): Observable<ResultHandler<User>> {
        return from(this.userConnector.userArchive({ id }));
      }

      public search(body: UserSearch): Observable<ResultHandler<User[]>> {
        return from(this.userConnector.userSearch({ body }));
      }
    }
    